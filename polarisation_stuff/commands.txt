NEW scripts with new scrap data
--------------------------------

python qu_pol/scrappy/scrap/scrappy.py -rs $regsize -idir $imgs --threshold 10 -odir newscrap -ref-image i-mfs.fits

python qu_pol/scrappy/rmsynthesis/rm_synthesis.py -id newscrap-s$regsize/los-data -od toops-new-script -md 400 --depth-step 1


NEW scripts with old scrap data
--------------------------------

python qu_pol/scrappy/rmsynthesis/rm_synthesis.py -id oldscrap/iqu-regions-mpc-3-boat -od toops-old-data-newscript -md 400 --depth-step 1




OLD scripts with new scrap data
-------------------------------

python qu_pol/scrap.py -rs 3 -rf newscrap-s3/regions/regions-valid.reg -t boat -f sel-test.txt --threshold 10 --output-dir oldscrap -wcs-ref i-mfs.fits -mrn 0.0006 -nrfs i-mfs.fits q-mfs.fits u-mfs.fits

python qu_pol/rm_synthesis.py -id oldscrap/iqu-regions-mpc-3-boat -od toops-old-script -md 400 --depth-step 1


python plot_bk.py -id IQU-regions-mpc-*-circles --yaml plots.yml 

python pica_rm.py -i I-image-cubes.fits -q Q-image-cubes.fits -u U-image-cubes.fits -f Frequencies-PicA-Masked.txt -ncore 60 -mask 572-mask.fits 



# From Lerato's script
python ../qu_pol/x2-FIT-QU-CUBE-RANDOM.py -q q-image-cube.fits -u u-image-cube.fits -i i-image-cube.fits -ncore 60 -mask $mask_dir/true_mask.fits -o qu-fit-x2-out/qufit -f frequencies.txt -n noises.txt -rmimg initial-p0-peak-rm.fits -pmaximg initial-FPOL-at-max-lpol.fits


# unstack the imagee cubes
fitstool.py --unstack=q-image-cube:FREQ:1 ../q-image-cube.fits 


# from here https://github.com/brentjens/rm-synthesis
"""
# First

from astropy.io import fits
for _ in "qu":
  hd1 = fits.getheader(f"{_}-image-cube.fits")
  dt1 = fits.getdata(f"{_}-image-cube.fits").squeeze()
  del hd1["NAXIS4"]
  del hd1["CTYPE4"]
  del hd1["CRPIX4"]
  del hd1["CRVAL4"]
  del hd1["CDELT4"]
  del hd1["CUNIT4"]
  hd1["NAXIS"] = 3

  fits.writeto(filename=f"{_}-mod.fits", data=dt1, header=hd1)
  print("Done")
"""
rmsynthesis q-mod.fits u-mod.fits frequencies.txt --low -400 --high 400 -o brentjents-rm-synth/ --dphi 1

rmsf = np.loadtxt("brentjents-rm-synth/rmsf.txt")
depth, re, im = rmsf[:,0], rmsf[:,1], rmsf[:,2]
amp = np.abs((re + 1j*im))
plt.plot(depth, amp)
plt.plot(depth, re, "k--")
plt.plot(depth, im, "b--")
plt.savefig("rmsf.png")



# WITH RM-SYnth
rmsynth3d q-image-cube.fits u-image-cube.fits frequencies.dat -i i-image-cube.fits -l 400

# 
rmclean3d FDF_im_dirty.fits RMSF_FWHM.fits

# compare the reuslts with and without derotation


#RM-TOOLS
rmsynth3d q-image-cube.fits u-image-cube.fits frequencies.dat -i i-image-cube.fits -l 400
rmclean3d FDF_im_dirty.fits RMSF_FWHM.fits


def read_npz(ins, compress=False):
    with np.load(ins, allow_pickle=True) as vn:
        data = dict(vn)
        mask = data.pop("mask")
        if compress:
            data = {k: np.ma.masked_array(data=v, mask=mask).compressed()
                    for k, v in data.items()}
        # else:
        #     data = {k: np.ma.masked_array(data=v, mask=mask)
        #             for k, v in data.items()}
            
    return data

old_scrap = read_npz(old)
new_scrap = read_npz(new)


def compare(oldd, newd, key, single=False):
    res = oldd[key]==newd[key]
    if single:
        res = np.all(ress)
    return res


# From QU Lerato's script
python qu_pol/scrappy/rmsynthesis/fit-qu-cube-random-x2.py \
    -q $conv_cubes/q-conv-image-cube.fits \
    -u $conv_cubes/u-conv-image-cube.fits \
    -i $conv_cubes/i-conv-image-cube.fits \
    -rm $prods/initial-RM-depth-at-peak-rm.fits \
    -fp $prods/initial-FPOL-at-max-lpol.fits \
    -ldf $scout-s3/los-data/reg_1.npz



####### mAKE A MASK FOR THE PROBLEMATIC RMs
python simple-mask.py ../6-00-polarimetry/i-mfs.fits -o problematic-rm.fits -above 4e-3 -rb important_regions/rm-problematic.reg


## make a 4 and 6 mjy mask

python simple-mask.py ../6-00-polarimetry/i-mfs.fits -o pica-6mjy-mask.fits -above 6e-3 -rb important_regions/pica_region-for-mask.reg 

python simple-mask.py ../6-00-polarimetry/i-mfs.fits -o pica-4mjy-mask.fits -above 4e-3 -rb important_regions/pica_region-for-mask.reg 



##### Problematic RM AREAS
python qu_pol/scrappy/scrap/scrappy.py -rs 3 -idir relevant-images --threshold 50 -odir testo -ref-image i-mfs.fits -nri i-mfs.fits -m $mask_dir/problematic-rm.fits

